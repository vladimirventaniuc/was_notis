swagger: "2.0"
info:
  description: "This is a sample server definition.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "notis@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "notary"
  description: "Endpoints for notaries"
- name: "translator"
  description: "Endpoints for translators"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /notary:
    post:
      tags:
      - "notary"
      summary: "Add a new notary"
      description: ""
      operationId: "addNotary"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Notary object that needs to be added to the RDF"
        required: true
        schema:
          $ref: "#/definitions/Notary"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "Object successfully stored"
  /notary/{id}:
    get:
      tags:
      - "notary"
      summary: "Find notary by ID"
      description: "Returns a single notary"
      operationId: "getNotaryById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of noraty to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Notary"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Notary not found"
    put:
      tags:
      - "notary"
      summary: "Update a notary"
      description: ""
      operationId: "updateNotary"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Notary object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Notary"
      - name: "id"
        in: "path"
        description: "ID of noraty to update"
        required: true
        type: "integer"
        format: "int64"
      responses:
        405:
          description: "Invalid input"
        404:
          description: "Notary not found"
        200:
          description: "Object successfully updated"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
    delete:
      tags:
      - "notary"
      summary: "Deletes a notary"
      description: ""
      operationId: "deleteNotary"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Notary id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Notary deleted successfully"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
  /notary/findByLocation:
    get:
      tags:
      - "notary"
      summary: "Finds notaries by city"
      description: "Multiple citiescan be provided with comma separated strings"
      operationId: "findNotariesByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "city"
        in: "query"
        description: "City values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successfully retrieved notaries"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notary"
        400:
          description: "Invalid city value"
  /notary/findByDocument:
    get:
      tags:
      - "notary"
      summary: "Finds notaries by documents"
      description: "Muliple document names can be provided with comma separated strings"
      operationId: "findNotariesByDocuments"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "documents"
        in: "query"
        description: "Documents to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successfully retrieved notaries"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notary"
        400:
          description: "Invalid tag value"
  /translator:
    post:
      tags:
      - "translator"
      summary: "Add a new translator"
      description: ""
      operationId: "addTranslator"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Translator object that needs to be added to the RDF"
        required: true
        schema:
          $ref: "#/definitions/Translator"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "Object successfully stored"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
  /translator/{id}:
    get:
      tags:
      - "translator"
      summary: "Find translator by ID"
      description: "Returns a single translator"
      operationId: "getTranslatorById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of translator to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Translator"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Translator not found"
    put:
      tags:
      - "translator"
      summary: "Update a translator"
      description: ""
      operationId: "updateTranslator"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Translator object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Translator"
      - name: "id"
        in: "path"
        description: "ID of translator to update"
        required: true
        type: "integer"
        format: "int64"
      responses:
        405:
          description: "Invalid input"
        404:
          description: "Notary not found"
        200:
          description: "Object successfully updated"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
    delete:
      tags:
      - "translator"
      summary: "Deletes a translator"
      description: ""
      operationId: "deleteTranslator"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Translator id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Translator deleted successfully"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Translator not found"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
  /translator/findByLocation:
    get:
      tags:
      - "translator"
      summary: "Finds translators by city"
      description: "Multiple cities can be provided with comma separated strings"
      operationId: "findTranslatorsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "city"
        in: "query"
        description: "City values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successfully retrieved translators"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Translator"
        400:
          description: "Invalid city value"
  /translator/findByDocument:
    get:
      tags:
      - "translator"
      summary: "Finds translators by documents"
      description: "Muliple document names can be provided with comma separated strings"
      operationId: "findTranslatorsByDocuments"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "documents"
        in: "query"
        description: "Documents to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successfully retrieved translators"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Translator"
        400:
          description: "Invalid document value"
  /translator/findByLanguage:
    get:
      tags:
      - "translator"
      summary: "Finds translators by language"
      description: "Muliple languages can be provided with comma separated strings"
      operationId: "findTranslatorsByLanguage"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "languages"
        in: "query"
        description: "Languages to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successfully retrieved translators"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Translator"
        400:
          description: "Invalid language value"
securityDefinitions:
  admin_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:entity: "modify entities in your account"
      read:entity: "read your entities"
definitions:
  Notary:
    type: "object"
    required:
    - "firstName"
    - "lastName"
    properties:
        id:
          type: "integer"
          format: "int64"
        documents:
          type: "object"
          $ref: "#/definitions/Document"
        city:
          type: "string"
          example: "Iasi"
        country:
          type: "string"
          example: "Romania"
        county:
          type: "string"
          example: "Iasi"
        address:
          type: "string"
          example: "Clopotari 28"
        phoneNo:
          type: "string"
  Translator:
    type: "object"
    required:
    - "firstName"
    - "lastName"
    properties:
        id:
          type: "integer"
          format: "int64"
        documents:
          type: "object"
          $ref: "#/definitions/Document"
        city:
          type: "string"
          example: "Iasi"
        country:
          type: "string"
          example: "Romania"
        county:
          type: "string"
          example: "Iasi"
        address:
          type: "string"
          example: "Clopotari 28"
        phoneNo:
          type: "string"
          example: "0742800957"
        languages:
          type: "object"
          example: "[en, ro, fr]"
  Document:
    type: "object"
    required:
    - "name"
    properties:
        id:
          type: "integer"
          format: "int64"
        type:
          type: "string"
          example: "type1"
        format:
          type: "string"
          example: "pdf"
        template:
          type: "string"
          example: "https://templates.com/notaryDocument1"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"